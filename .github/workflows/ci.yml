# SPDX-FileCopyrightText: 2022 Google LLC
#
# SPDX-License-Identifier: Apache-2.0

name: CI

# XXX: What we'd really like is run on every pull request / pull request change,
#      which allows GitHub to cancel runs after (force) pushes. Triggering on
#      these seems to be broken since January 19th 2023 however. Note that not
#      everyone likes auto-cancellation so we should probably recognize [no-skip]
#      commits.
on:
  schedule:
    # UTC midnight. See the comment at 'branches-ignore' for more information on
    # our development flow. This job will run in context of the branch 'staging'.
    - cron:  '0 0 * * *'

  push:
      branches-ignore:
        # Developers request to merge their changes into 'staging'. In order to
        # do so, relatively cheap tests should pass CI. Every night, CI runs our
        # full test suite on 'staging'. If these pass, a pull request may be
        # created to get 'main' up to date with 'staging'. Note that this should
        # be automated in the future, but this will require some engineering.
        - 'staging'
        - 'main'

concurrency:
 group: ${{ github.head_ref || github.run_id }}
 cancel-in-progress: true

jobs:
  license-check:
    runs-on: self-hosted
    container:
      image: ubuntu:22.04
    steps:
    - uses: actions/checkout@v3
    - name: REUSE Compliance Check
      uses: fsfe/reuse-action@v1


  lint:
    name: Basic linting
    runs-on: self-hosted
    container:
      image: ubuntu:22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          .github/scripts/set_de_mirror.sh
          apt-get update
          apt-get install -y pcregrep

      - name: EOL whitespace
        run: |
          .github/scripts/check_eol_whitespace.sh

      - name: Enforce EOF newline
        run: |
          .github/scripts/check_missing_eof_newline.sh

  build:
    name: Build dependencies
    runs-on: self-hosted
    defaults:
      run:
        shell: git-nix-shell {0} --pure

    container:
      image: ghcr.io/clash-lang/nixos-bittide-hardware:2023-02-01

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set CI flags
        run: |
          cp .github/cabal.project cabal.project.local

      - name: Update Cabal index info
        run: |
          cabal update
          cabal freeze

      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cabal-nix/store

          key: packages-cachebust-3-${{ hashFiles('cabal.project.freeze') }}
          restore-keys: packages-

      - name: Build
        run: |
          cabal build all --only-dependencies

  elastic-buffer-sim-topologies-matrix:
    name: elastic-buffer-sim-topologies simulation matrix generation
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Generate matrix
        run: |
          if [[ "${{ github.event_name }}" == "schedule" || $(.github/scripts/force_expensive_checks.sh) == "true" ]]; then
            cp .github/simulation/all.json sim.json
          else
            cp .github/simulation/staging.json sim.json
          fi

      - name: Set simulation matrix
        id: set-sim-matrix
        run: |
          echo "sim_matrix=$(cat sim.json | tr '\n' ' ')" | tee -a "$GITHUB_OUTPUT"

    outputs:
      sim_matrix: ${{ steps.set-sim-matrix.outputs.sim_matrix }}

  elastic-buffer-sim-topologies:
    name: Simulate network
    runs-on: self-hosted
    defaults:
      run:
        shell: git-nix-shell {0} --pure
    needs: [build, lint, elastic-buffer-sim-topologies-matrix]

    strategy:
      matrix:
        target: ${{ fromJson(needs.elastic-buffer-sim-topologies-matrix.outputs.sim_matrix) }}
      fail-fast: false

    container:
      image: ghcr.io/clash-lang/nixos-bittide-hardware:2023-02-01

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set CI flags
        run: |
          cp .github/cabal.project cabal.project.local

      - name: Update Cabal index info
        run: |
          cabal update
          cabal freeze

      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cabal-nix/store

          key: packages-cachebust-3-${{ hashFiles('cabal.project.freeze') }}
          restore-keys: packages-cachebust-3-
          fail-on-cache-miss: true

      - name: Plot mesh grid
        run: |
          cabal run -- elastic-buffer-sim:sim \
            +RTS -M${{ matrix.target.hmem }}M -RTS \
            --output-mode pdf \
            --steps ${{ matrix.target.steps }} \
            --samples 1000 \
            --stop-when-stable \
            ${{ matrix.target.topology }} ${{ matrix.target.args }}

      - name: Upload plots
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: gen-plots-hs-${{ matrix.target.topology }}
          path: _build
          retention-days: 14

  elastic-buffer-sim-tests:
    name: elastic-buffer-sim unittests
    runs-on: self-hosted
    defaults:
      run:
        shell: git-nix-shell {0} --pure
    needs: [build, lint]

    container:
      image: ghcr.io/clash-lang/nixos-bittide-hardware:2023-02-01

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set CI flags
        run: |
          cp .github/cabal.project cabal.project.local

      - name: Update Cabal index info
        run: |
          cabal update
          cabal freeze

      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cabal-nix/store

          key: packages-cachebust-3-${{ hashFiles('cabal.project.freeze') }}
          restore-keys: packages-cachebust-3-
          fail-on-cache-miss: true

      - name: Run unittests
        run: |
          cabal run elastic-buffer-sim:unittests


  bittide-tests:
    name: Bittide tests
    runs-on: self-hosted
    defaults:
      run:
        shell: git-nix-shell {0} --pure
    needs: [build, lint]

    container:
      image: ghcr.io/clash-lang/nixos-bittide-hardware:2023-02-01

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set CI flags
        run: |
          cp .github/cabal.project cabal.project.local

      - name: Update Cabal index info
        run: |
          cabal update
          cabal freeze

      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cabal-nix/store

          key: packages-cachebust-3-${{ hashFiles('cabal.project.freeze') }}
          restore-keys: packages-cachebust-3-
          fail-on-cache-miss: true

      - name: Unittests
        run: |
          # While Hedgehog can fill many cores with "work", it doesn't actually
          # speed up the tests.
          cabal run -- bittide:unittests -j 1 +RTS -N2

      - name: Doctests
        run: |
          cabal run -- bittide:doctests

  rust-code-lints:
    name: Rust code Lints
    runs-on: self-hosted
    defaults:
      run:
        shell: git-nix-shell {0} --pure
    needs: [lint]
    container:
      image: ghcr.io/clash-lang/nixos-bittide-hardware:2023-02-01

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Rust formatting
        run: |
          cargo fmt --all -- --check

      - name: Clippy check
        run: |
          cargo clippy --target x86_64-unknown-linux-gnu --all --tests --all-features -- -D warnings


  rust-unit-tests:
    name: Run Rust Unit Tests
    runs-on: self-hosted
    defaults:
      run:
        shell: git-nix-shell {0} --pure
    needs: [lint, rust-code-lints]
    container:
      image: ghcr.io/clash-lang/nixos-bittide-hardware:2023-02-01

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/cache@v3
        name: Cache
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: cargo-cache-cachebust-2-${{ hashFiles('Cargo.lock') }}

      - name: Running Tests
        run: |
          cargo test --target x86_64-unknown-linux-gnu --all

  rust-build-executables:
    name: Build Rust Executables (examples and integration tests)
    runs-on: self-hosted
    defaults:
      run:
        shell: git-nix-shell {0} --pure
    needs: [lint, rust-code-lints]
    container:
      image: ghcr.io/clash-lang/nixos-bittide-hardware:2023-02-01

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/cache@v3
        name: Cache
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ./target/
          key: cargo-cache-cachebust-2-${{ hashFiles('Cargo.lock') }}

      - name: Building Debug Executables
        run: cargo build

      - name: Building Release Executables
        run: cargo build --release

      - name: Archive Integration Tests
        run: |
          cd vex-riscv-sim; sh bundle_test_binaries.sh

      - name: Upload VexRiscv Integration Tests
        uses: actions/upload-artifact@v3
        with:
          name: vex-riscv-test-binaries
          path: vex-riscv-sim/vex-riscv-test-binaries.tar


  bittide-instances-doctests:
    name: bittide-instances doctests
    runs-on: self-hosted
    defaults:
      run:
        shell: git-nix-shell {0} --pure
    needs: [build, lint]

    container:
      image: ghcr.io/clash-lang/nixos-bittide-hardware:2023-02-01

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set CI flags
        run: |
          cp .github/cabal.project cabal.project.local

      - name: Update Cabal index info
        run: |
          cabal update
          cabal freeze

      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cabal-nix/store

          key: packages-cachebust-3-${{ hashFiles('cabal.project.freeze') }}
          restore-keys: packages-cachebust-3-
          fail-on-cache-miss: true

      - name: Doctests
        run : |
          cabal run -- bittide-instances:doctests

  bittide-instances-unittests:
    name: bittide-instances unittests
    runs-on: self-hosted
    defaults:
      run:
        shell: git-nix-shell {0} --pure
    needs: [build, lint]

    container:
      image: ghcr.io/clash-lang/nixos-bittide-hardware:2023-02-01

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set CI flags
        run: |
          cp .github/cabal.project cabal.project.local

      - name: Update Cabal index info
        run: |
          cabal update
          cabal freeze

      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cabal-nix/store

          key: packages-cachebust-3-${{ hashFiles('cabal.project.freeze') }}
          restore-keys: packages-cachebust-3-
          fail-on-cache-miss: true

      - name: Unit tests
        run : |
          cabal run -- bittide-instances:unittests

  bittide-instances-hdl-matrix:
    name: bittide-instances synthesis matrix generation
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Generate matrix
        run: |
          if [[ "${{ github.event_name }}" == "schedule" || $(.github/scripts/force_expensive_checks.sh) == "true" ]]; then
            cp .github/synthesis/all.json checks.json
          else
            cp .github/synthesis/staging.json checks.json
          fi

      - name: Set test matrix
        id: set-matrix
        run: |
          echo "check_matrix=$(cat checks.json | tr '\n' ' ')" | tee -a "$GITHUB_OUTPUT"

    outputs:
      check_matrix: ${{ steps.set-matrix.outputs.check_matrix }}

  bittide-instances-hdl:
    name: bittide-instances synthesis
    runs-on: self-hosted
    defaults:
      run:
        # We leave out '--pure', as 'with_vivado.sh' relies on basic Ubuntu
        shell: git-nix-shell {0}
    env:
      SYNTHESIS_PART: xcku040-ffva1156-2-e
      # SYNTHESIS_PART: xcku035-ffva1156-2-e
    needs: [build, lint, bittide-instances-hdl-matrix]

    strategy:
      matrix:
        target: ${{ fromJson(needs.bittide-instances-hdl-matrix.outputs.check_matrix) }}
      fail-fast: false

    container:
      image: ghcr.io/clash-lang/nixos-bittide-hardware:2023-02-01
      volumes:
        - /opt/tools:/opt/tools
      options: --mac-address="6c:5a:b0:6c:13:0b"

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set CI flags
        run: |
          # We use the same flags as the 'build' step to reuse caches. This
          # "simulation" config only sets altopts on the Risc core, which we
          # don't synthesize yet.
          #
          # TODO: Either switch to VexRisc or update cache strategy.
          #
          cp .github/cabal.project cabal.project.local

      - name: Update Cabal index info
        run: |
          cabal update
          cabal freeze

      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cabal-nix/store

          key: packages-cachebust-3-${{ hashFiles('cabal.project.freeze') }}
          restore-keys: packages-cachebust-3-
          fail-on-cache-miss: true

      - name: HDL generation and synthesis
        run : |
          .github/scripts/with_vivado.sh cabal run -- bittide-instances:shake ${{ matrix.target.top }}:${{ matrix.target.stage }}

      - name: Archive synthesis artifacts
        uses: actions/upload-artifact@v3
        with:
          name: _build
          path: _build
          retention-days: 14

  vex-riscv:
    name: VexRiscv core
    runs-on: self-hosted
    defaults:
      run:
        shell: git-nix-shell {0} --pure
    needs: [build, lint]

    container:
      image: ghcr.io/clash-lang/nixos-bittide-hardware:2023-02-01

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set CI flags
        run: |
          cp .github/cabal.project cabal.project.local

      - name: Update Cabal index info
        run: |
          cabal update
          cabal freeze

      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cabal-nix/store

          key: packages-cachebust-3-${{ hashFiles('cabal.project.freeze') }}
          restore-keys: packages-cachebust-3-
          fail-on-cache-miss: true

      - name: Build VexRiscv
        run: |
          cabal build vex-riscv

  vex-riscv-integration-tests:
    name: VexRiscv integration tests
    runs-on: self-hosted
    defaults:
      run:
        shell: git-nix-shell {0} --pure
    needs: [build, lint, vex-riscv, rust-build-executables]

    container:
      image: ghcr.io/clash-lang/nixos-bittide-hardware:2023-02-01

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set CI flags
        run: |
          cp .github/cabal.project cabal.project.local

      - name: Update Cabal index info
        run: |
          cabal update
          cabal freeze

      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cabal-nix/store

          key: packages-cachebust-3-${{ hashFiles('cabal.project.freeze') }}
          restore-keys: packages-cachebust-3-
          fail-on-cache-miss: true

      - name: Build VexRiscv-sim
        run: |
          cabal build vex-riscv-sim


      - name: Download VexRiscv Integration Tests
        uses: actions/download-artifact@v3
        with:
          name: vex-riscv-test-binaries

      - name: Extract VexRiscv Integration Tests
        run: |
          tar -x -f vex-riscv-test-binaries.tar

      - name: Run unittests
        run: |
          cabal run vex-riscv-sim:unittests


  all:
    name: All jobs finished
    if: always()
    needs: [
        bittide-instances-doctests,
        bittide-instances-hdl-matrix,
        bittide-instances-hdl,
        bittide-instances-unittests,
        bittide-tests,
        build,
        elastic-buffer-sim-tests,
        elastic-buffer-sim-topologies-matrix,
        elastic-buffer-sim-topologies,
        rust-code-lints,
        rust-unit-tests,
        rust-build-executables,
        license-check,
        lint,
        vex-riscv,
        vex-riscv-integration-tests,
      ]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Check dependencies for failures
        run: |
          # Test all dependencies for success/failure
          set -x
          success="${{ contains(needs.*.result, 'success') }}"
          fail="${{ contains(needs.*.result, 'failure') }}"
          set +x

          # Test whether success/fail variables contain sane values
          if [[ "${success}" != "true" && "${success}" != "false" ]]; then exit 1; fi
          if [[ "${fail}"    != "true" && "${fail}"    != "false" ]]; then exit 1; fi

          # We want to fail if one or more dependencies fail. For safety, we introduce
          # a second check: if no dependencies succeeded something weird is going on.
          if [[ "${fail}" == "true" || "${success}" == "false" ]]; then
            echo "One or more dependency failed, or no dependency succeeded."
            exit 1
          fi

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get -y install python3-yaml
      - name: Check that the 'all' job depends on all other jobs
        run: |
          .github/scripts/all_check.py
