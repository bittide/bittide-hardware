% SPDX-FileCopyrightText: 2023 Google LLC
%
% SPDX-License-Identifier: CC0-1.0

This file was originally generated by
[`cargo-cabal`](https://github.com/yvan-sraka/cargo-cabal) and has
been adapted for the bittide specific setup. Although `cargo-cabal` is
not used any more this `Setup.lhs` still survived for linking the Rust
dependencies with `bittide-rust-ffi`.

> import Control.Exception (bracket)
> import Data.Maybe
> import qualified Distribution.PackageDescription as PD
> import Distribution.Simple
>   ( Args,
>     UserHooks (confHook, preConf),
>     defaultMainWithHooks,
>     simpleUserHooks,
>   )
> import Distribution.Simple.LocalBuildInfo
>   ( LocalBuildInfo (localPkgDescr),
>   )
> import Distribution.Simple.Setup
>   ( BuildFlags (buildVerbosity),
>     ConfigFlags (configVerbosity),
>     fromFlag,
>   )
> import Distribution.Simple.UserHooks
>   ( UserHooks (buildHook, confHook),
>   )
> import Distribution.Simple.Utils (rawSystemExit)
> import Distribution.Verbosity
>   ( Verbosity, silent
>   )
> import System.Directory
>
> main :: IO ()
> main =
>   defaultMainWithHooks
>     simpleUserHooks
>       { confHook = rustConfHook
>       , buildHook = rustBuildHook
>       }
>
> rawSystemInDir
>   :: String
>   -> Verbosity
>   -> String
>   -> [String]
>   -> IO ()
> rawSystemInDir dir verbosity prog args = do
>   curDir <- getCurrentDirectory
>   bracket
>     (setCurrentDirectory dir)
>     (\_ -> setCurrentDirectory curDir)
>     (\_ -> rawSystemExit verbosity prog args)

This hook could be remove if at some point, likely if this issue is resolved
https://github.com/haskell/cabal/issues/2641

> rustConfHook ::
>   (PD.GenericPackageDescription, PD.HookedBuildInfo) ->
>   ConfigFlags ->
>   IO LocalBuildInfo
> rustConfHook (description, buildInfo) flags = do
>   localBuildInfo <- confHook simpleUserHooks (description, buildInfo) flags
>   let packageDescription = localPkgDescr localBuildInfo
>       library = fromJust $ PD.library packageDescription
>       libraryBuildInfo = PD.libBuildInfo library
>   dir <- getCurrentDirectory
>
>   let hostToolsDir = dir ++ "/../host-tools"
>   let hostToolsTargetDir = hostToolsDir ++ "/target/x86_64-unknown-linux-gnu"
>
>   rawSystemInDir hostToolsDir silent
>     "cargo"
>     ["build", "-p", "callisto-lib", "--release"]
>
>   return localBuildInfo
>     { localPkgDescr = packageDescription
>       { PD.library = Just $ library
>         { PD.libBuildInfo = libraryBuildInfo
>           { PD.extraLibDirs = (hostToolsTargetDir ++ "/release") :
>                               (hostToolsTargetDir ++ "/debug") :
>             PD.extraLibDirs libraryBuildInfo
>     } } } }

It would be nice to remove this hook ot some point, e.g., if this RFC is merged
in Cabal https://github.com/haskell/cabal/issues/7906

> rustBuildHook ::
>   PD.PackageDescription ->
>   LocalBuildInfo ->
>   UserHooks ->
>   BuildFlags ->
>   IO ()
> rustBuildHook description localBuildInfo hooks flags = do
>   dir <- getCurrentDirectory
>   let hostToolsDir = dir ++ "/../host-tools"

>
>   putStrLn "******************************************************************"
>   putStrLn "Call `cargo build --release` to build a dependency written in Rust"
>   -- FIXME: add `--target $TARGET` flag to support cross-compiling to $TARGET
>
>   rawSystemInDir hostToolsDir (fromFlag $ buildVerbosity flags)
>     "cargo"
>     ["build", "-p", "callisto-lib", "--release"]
>
>   putStrLn "... `rustc` compilation seems to succeed! Back to Cabal build:"
>   putStrLn "******************************************************************"
>   putStrLn "Back to Cabal build"
>   buildHook simpleUserHooks description localBuildInfo hooks flags

This handy automation (particularly useful when you want to quickly prototype
without having to spawn manually `cargo` commands) is disabled by default.
Feel free to re-enable it while debugging your library, but I discourage you
strongly to publish anything on Hackage that contains this hook!
