// SPDX-FileCopyrightText: 2022 Google LLC
//
// SPDX-License-Identifier: Apache-2.0

/dts-v1/;

/memreserve/ 0 4;

/ { // Bittide domain
    // clock-frequency
    { // Bittide nodes
      { //processing elements
        { // processing element 0
          { // memory
            // memory
            // memory
            // uart
            // timing
            // scatter engine
            // gather engine
          };
        // processing element 1
          { // memory
            // memory
            // uart
            // timing
            // scatter engine
            // gather engine
          };
      };

  #address-cells = <1>;
  #size-cells = <1>;

  model = "bittide,processing-element";

  compatible;

  chassis-type = "embedded";

  // Contains a single cpu along with:
  // - instruction memory
  // - data memory
  // - uart perihperal with 2 fifos of depth 16.
  // - timing peripheral
  cpus {
    #address-cells = <1>;
    #size-cells = <0>;

    // Single riscv cpu
    cpu@0 {
      device_type = "cpu";
      reg = <0>; // required field

      timebase-frequency = <200000000>; // 200Mhz
      clock-frequency = <200000000>; // 200Mhz

      status = "okay";
    };
  };

  // 32kb instruction memory
  memory@4 {
    device_type = "memory";
    reg = <0x00000004 0x00008000>;
  };

  // 32kb data memory
  memory@8004 {
    device_type = "memory";
    reg = <0x00008004 0x00008000>;
  };

  // uart peripheral with 2 fifos of depth 16.
  serial@10010 {
    compatible = "bittide,serial,ns16550"; //National Semiconductor 16450/16550 Compatible UART Requirements
    clock-frequency = <200000000>;
    current-speed = <921600>;
    reg = <0x00010010 0x0000008>;
    tx-fifo-depth = <16>;
    rx-fifo-depth = <16>;
  };

  // timing peripheral
  timer@10020 {
    compatible = "bittide,timer";
    reg = <0x00010020 0x00000008>;
  };

  reserved-memory {
    #address-cells = <1>;
    #size-cells = <1>;
    ranges;
  };

  scatter-unit {
    #address-cells = <1>;
    #size-cells = <1>;

    scatter-memory@20000000 {
      reg = <0x20000000 0x00001000>;
    };

    local-sequence-counter-reg@21000000 {
      reg = <0x21000000 0x00000008>;
    };

    remote-sequence-counter-reg@21000008 {
      reg = <0x21000008 0x00000008>;
    };

    record-remote-sequence-counter-reg@21000010 {
      reg = <0x21000010 0x00000001>;
    };

    metacycle-reg@21000011 {
      reg = <0x21000011 0x00000001>;
    };
  };

  gather-unit {
    #address-cells = <1>;
    #size-cells = <1>;

    gather-memory@30000000 {
      reg = <0x30000000 0x00001000>;
    };

    sequence-counter-reg@31000000 {
      reg = <0x31000000 0x00000008>;
    };

    send-sequence-counter-reg@31000008 {
      reg = <0x31000008 0x00000001>;
    };

    metacycle-reg@31000009 {
      reg = <0x31000009 0x00000001>;
    };
  };

};
