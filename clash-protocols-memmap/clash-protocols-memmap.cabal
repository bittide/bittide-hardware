cabal-version: 3.8
name: clash-protocols-memmap
version: 0.1
license: Apache-2.0
license-file: LICENSE
author: QBayLogic B.V.
maintainer: devops@qbaylogic.com
copyright: Copyright Â© 2024 Google LLC

-- One day we'll be able to replace this by 'default-language: GHC2024' and
-- disabling a few extensions :)
common ghc2024
  default-extensions:
    -- GHC2024, excluding:
    -- ImplicitPrelude:          We want Clash.Prelude
    -- ImplicitStagePersistence: Not a thing yet in the GHC we use
    -- ImportQualifiedPost:      Okay on its own, but trips up fourmolu
    -- StarIsType:               We want '*' to mean multiplication on type level
    BangPatterns
    BinaryLiterals
    ConstrainedClassMethods
    ConstraintKinds
    DataKinds
    DeriveDataTypeable
    DeriveFoldable
    DeriveFunctor
    DeriveGeneric
    DeriveLift
    DeriveTraversable
    DerivingStrategies
    DisambiguateRecordFields
    DoAndIfThenElse
    EmptyCase
    EmptyDataDecls
    EmptyDataDeriving
    ExistentialQuantification
    ExplicitForAll
    ExplicitNamespaces
    FieldSelectors
    FlexibleContexts
    FlexibleInstances
    ForeignFunctionInterface
    GADTSyntax
    GADTs
    GeneralisedNewtypeDeriving
    HexFloatLiterals
    InstanceSigs
    KindSignatures
    LambdaCase
    MonoLocalBinds
    MonomorphismRestriction
    MultiParamTypeClasses
    NamedFieldPuns
    NamedWildCards
    NumericUnderscores
    PatternGuards
    PolyKinds
    PostfixOperators
    RankNTypes
    RelaxedPolyRec
    RoleAnnotations
    ScopedTypeVariables
    StandaloneDeriving
    StandaloneKindSignatures
    TraditionalRecordSyntax
    TupleSections
    TypeApplications
    TypeOperators
    TypeSynonymInstances

common clash
  -- TemplateHaskell is used to support convenience functions such as
  -- 'listToVecTH' and 'bLit'.
  --
  -- `NoImplicitPrelude` is used because Clash offers Clash.Prelude
  default-extensions:
    NoImplicitPrelude
    NoStarIsType
    QuasiQuotes
    TemplateHaskell

  ghc-options:
    -- Plugins to support type-level constraint solving on naturals:
    --   - GHC.TypeLits.Extra.Solver
    --   - GHC.TypeLits.Normalise
    --   - GHC.TypeLits.KnownNat.Solver
    --
    -- Clash needs access to the source code in compiled modules:
    --   -fexpose-all-unfoldings
    --
    -- Worker wrappers introduce unstable names for functions that might have
    -- blackboxes attached for them. You can disable this, but be sure to add
    -- a no-specialize pragma to every function with a blackbox.
    --   -fno-worker-wrapper
    --
    -- Strict annotations - while sometimes preventing space leaks - trigger
    -- optimizations Clash can't deal with. See:
    --
    --    https://github.com/clash-lang/clash-compiler/issues/2361
    --
    -- These flags disables the optimization:
    --   -fno-unbox-small-strict-fields
    --   -fno-unbox-strict-fields
    -Wall
    -Wcompat
    -fplugin=GHC.TypeLits.Extra.Solver
    -fplugin=GHC.TypeLits.Normalise
    -fplugin=GHC.TypeLits.KnownNat.Solver
    -fplugin=Protocols.Plugin
    -fconstraint-solver-iterations=20
    -fexpose-all-unfoldings
    -fno-worker-wrapper
    -fno-unbox-small-strict-fields
    -fno-unbox-strict-fields

  build-depends:
    clash-protocols,
    ghc-typelits-extra >=0.4.4,
    ghc-typelits-knownnat >=0.7.7,
    ghc-typelits-natnormalise >=0.7.7,

common extra
  default-extensions:
    DefaultSignatures
    DeriveAnyClass
    TypeFamilies
    ViewPatterns

  ghc-options:
    -Wall
    -Wcompat

library
  import: ghc2024, clash, extra
  hs-source-dirs: src
  exposed-modules:
    BitPackC
    BitPackC.Align
    BitPackC.Padding
    Internal.HdlTest.UartMock
    Protocols.MemoryMap
    Protocols.MemoryMap.Check
    Protocols.MemoryMap.Check.AbsAddress
    Protocols.MemoryMap.Check.Normalized
    Protocols.MemoryMap.FieldType
    Protocols.MemoryMap.Json
    Protocols.MemoryMap.Registers.WishboneStandard
    Protocols.MemoryMap.TypeCollect

  build-depends:
    aeson,
    aeson-pretty,
    base >=4.19.0.0,
    bytestring >=0.10 && <0.13,
    clash-prelude,
    clash-protocols,
    constraints,
    containers,
    extra,
    ghc-typelits-extra-lemmas,
    mtl,
    scientific,
    template-haskell,
    text,

executable hdl-test
  import: ghc2024, clash, extra
  main-is: app/HdlTest.hs
  build-depends:
    aeson,
    aeson-pretty,
    base,
    bytestring,
    clash-ghc,
    clash-prelude,
    clash-protocols,
    clash-protocols-memmap,
    containers,
    directory,

executable example
  import: ghc2024, clash, extra
  main-is: Example.hs
  hs-source-dirs: app
  default-language: Haskell2010
  ghc-options:
    -threaded
    -rtsopts
    -with-rtsopts=-M100M

  build-depends:
    aeson,
    aeson-pretty,
    base,
    bytestring,
    clash-prelude,
    clash-protocols,
    clash-protocols-memmap,
    containers,
    directory,

test-suite doctests
  type: exitcode-stdio-1.0
  main-is: doctests.hs
  ghc-options:
    -Wall
    -Wcompat
    -threaded

  hs-source-dirs: tests
  build-depends:
    base,
    clash-protocols-memmap,
    doctest-parallel >=0.3.0.1 && <0.4,
    filepath,
    word8,

test-suite unittests
  import: ghc2024, clash, extra
  hs-source-dirs: tests
  type: exitcode-stdio-1.0
  main-is: UnitTests.hs
  ghc-options:
    -threaded
    -rtsopts
    -with-rtsopts=-N12

  other-modules:
    Tests.BitPackC
    Tests.Padding
    Tests.Protocols.MemoryMap.Registers.WishboneStandard

  build-depends:
    base,
    clash-prelude,
    clash-prelude-hedgehog,
    clash-protocols,
    clash-protocols-memmap,
    constraints,
    containers,
    deepseq,
    extra,
    ghc-typelits-extra-lemmas,
    hedgehog >=1.0 && <1.5,
    lifted-async,
    pretty-show,
    tasty >=1.5 && <1.7,
    tasty-hedgehog >=1.2 && <1.5,
    tasty-hunit,
    tasty-th,
